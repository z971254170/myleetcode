## 构造

根据题意进行模拟即可：起始先使用大小为 $C = 26$ 的数组 `cnts` 对 `s` 的所有字符进行词频统计，随后根据 `order` 的优先级进行构造。

若字符 `x` 在 `order` 中排于 `y` 前面，则先往答案追加 `cnts[x]` 个字符 `x`，再往答案追加 `cnts[y]` 个字符 `y`，并更新对应词频，最后将仅出现在 `s` 中的字符追加到答案尾部。

代码：

* []

```Java
class Solution {
    public String customSortString(String order, String s) {
        int[] cnts = new int[26];
        for (char c : s.toCharArray()) cnts[c - 'a']++;
        StringBuilder sb = new StringBuilder();
        for (char c : order.toCharArray()) {
            while (cnts[c - 'a']-- > 0) sb.append(c);
        }
        for (int i = 0; i < 26; i++) {
            while (cnts[i]-- > 0) sb.append((char)(i + 'a'));
        }
        return sb.toString();
    }
}
```

* []

```TypeScript
function customSortString(order: string, s: string): string {
    const cnts = new Array<number>(26).fill(0)
    for (const c of s) cnts[c.charCodeAt(0) - 'a'.charCodeAt(0)]++
    let ans = ''
    for (const c of order) {
        while (cnts[c.charCodeAt(0) - 'a'.charCodeAt(0)]-- > 0) ans += c
    }
    for (let i = 0; i < 26; i++) {
        while (cnts[i]-- > 0) ans += String.fromCharCode(i + 'a'.charCodeAt(0));
    }
    return ans
}
```

* []

```Python
class Solution:
    def customSortString(self, order: str, s: str) -> str:
        cnts = [0] * 26
        for c in s:
            cnts[ord(c) - ord('a')] += 1
        ans = ''
        for c in order:
            num = ord(c) - ord('a')
            if cnts[num] > 0:
                ans += c * cnts[num]
                cnts[num] = 0
        for i in range(26):
            if cnts[i] > 0:
                ans += chr(i + ord('a')) * cnts[i]
        return ans
```

* 时间复杂度：$O(n + m)$
* 空间复杂度：$O(C)$，其中 $C = 26$ 为字符集大小

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://acoier.com/oimg/gzh-qrcode.webp)，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
